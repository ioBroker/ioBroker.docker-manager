{
  "Active": "积极的",
  "Add environment variable": "添加环境变量",
  "Add mount": "添加挂载",
  "Add new container": "添加新容器",
  "Add new image": "添加新图片",
  "Add new network": "添加新网络",
  "Add port mapping": "添加端口映射",
  "Are you sure you want to delete network \"%s\"?": "您确定要删除网络“%s”吗？",
  "Bridge (default)": "桥接（默认）",
  "Cancel": "取消",
  "Close": "关闭",
  "Command": "命令",
  "Container explanation": "另一方面，Docker 容器是 Docker 镜像的运行时实例。它是一个轻量级的隔离环境，用于运行 Docker 镜像定义的应用程序。\n运行 Docker 镜像时，它会创建一个容器，封装应用程序及其依赖项，使其能够在不同环境中一致运行。\n在 ioBroker 符号中，它就像一个适配器实例。",
  "Container logs": "容器日志",
  "Container name": "容器名称",
  "Container path": "容器路径",
  "Container port": "集装箱港口",
  "Container ports must be unique": "集装箱港口必须是唯一的",
  "Container with this name already exists, please choose another one": "同名容器已存在，请选择其他容器",
  "Containers": "容器",
  "Create": "创造",
  "Create and run": "创建并运行",
  "Create new container": "创建新容器",
  "Create new network": "创建新网络",
  "Created": "创建",
  "Delete": "删除",
  "Delete container": "删除容器",
  "Delete image": "删除图片",
  "Delete network": "删除网络",
  "Disk usage": "磁盘使用情况",
  "Docker explanation": "Docker 是一个开源平台，用于自动化容器中应用程序的部署、扩展和管理。\n容器是轻量级的隔离环境，包含运行应用程序所需的所有组件，例如代码、运行时、库和配置。\n借助 Docker，开发者可以一致且可移植地交付应用程序，而无需考虑底层基础架构。\n这促进了团队协作，简化了在不同系统上运行应用程序的过程，并提高了可扩展性。",
  "Driver": "司机",
  "Environment": "环境",
  "Environment variable name": "环境变量名称",
  "Environment variable names cannot be empty": "环境变量名称不能为空",
  "Environment variable names must be unique": "环境变量名称必须是唯一的",
  "Environment variable value": "环境变量值",
  "Error": "错误",
  "Execute command in container": "在容器中执行命令",
  "Execute command inside container": "在容器内执行命令",
  "General": "一般的",
  "Host": "主持人",
  "Host path": "主机路径",
  "Host port": "主机端口",
  "Host ports must be unique": "主机端口必须是唯一的",
  "ID": "ID",
  "If activated, container is removed after exit (cannot be used with restart policies)": "如果激活，则退出后容器将被删除（不能与重启策略一起使用）",
  "Image": "图像",
  "Image ID": "图像 ID",
  "Image explanation": "Docker 镜像是一个轻量级、独立且可执行的软件包，包含运行软件所需的一切，包括代码、运行时、库、环境变量和配置文件。\n可以将其视为应用程序及其依赖项在特定时间点的快照。\n在 ioBroker 符号中，它就像一个适配器。",
  "Image information": "图像信息",
  "Image name": "图像名称",
  "Image tag": "图像标签",
  "Images": "图片",
  "Information about image": "关于图像的信息",
  "Instance is not alive": "实例不存在",
  "Invalid mount type": "无效的安装类型",
  "Logs": "日志",
  "Main": "主要的",
  "Mount type": "安装类型",
  "Name": "姓名",
  "Network": "网络",
  "Network mode": "网络模式",
  "Network name": "网络名称",
  "Networks": "网络",
  "None": "没有任何",
  "Please enter a container name": "请输入容器名称",
  "Please enter a container path for all mounts": "请输入所有安装的容器路径",
  "Please enter a host path for all bind mounts": "请输入所有绑定挂载的主机路径",
  "Please enter a valid Windows pipe path for all npipe mounts": "请为所有 npipe 安装输入有效的 Windows 管道路径",
  "Please enter a valid container port (1-65535)": "请输入有效的集装箱港口（1-65535）",
  "Please enter a valid host port (1-65535)": "请输入有效的主机端口（1-65535）",
  "Please enter a volume name for all volume mounts": "请输入所有卷安装的卷名称",
  "Please select a mount type for all mounts": "请为所有安装座选择一种安装座类型",
  "Please select an image": "请选择图片",
  "Ports": "端口",
  "Press Enter to add": "按 Enter 键添加",
  "Protocol": "协议",
  "Publish all ports": "发布所有端口",
  "Pull": "拉",
  "Pull latest version of image": "拉取最新版本的镜像",
  "Pull new image": "拉取新镜像",
  "Read only": "只读",
  "Reclaimable": "可回收",
  "Reconnect to backend": "重新连接到后端",
  "Recreate container with new image": "使用新图像重新创建容器",
  "Remove container on stop": "停止时移除容器",
  "Remove image": "删除图片",
  "Remove network": "删除网络",
  "Repository": "存储库",
  "Restart": "重启",
  "Restart container": "重启容器",
  "Scope": "范围",
  "Security": "安全",
  "Selected image not found, please select another one": "未找到所选图片，请选择其他图片",
  "Size": "尺寸",
  "Source must be empty for tmpfs mounts": "对于 tmpfs 挂载，源必须为空",
  "Start container": "启动容器",
  "Status": "地位",
  "Stop": "停止",
  "Stop container": "停止容器",
  "Tag": "标签",
  "Total": "全部的",
  "Type": "类型",
  "Uptime": "正常运行时间",
  "Version": "版本",
  "Volume": "体积",
  "container": "容器",
  "default": "默认",
  "network_explanation": "Docker 网络是由 Docker 创建的虚拟局域网。\n同一网络上的容器可以通过名称（例如 http://influxdb:8086）相互通信，而不同网络上的容器默认隔离。这允许您安全地连接 Grafana 和 InfluxDB 等服务，而不会将它们暴露给主机系统。"
}